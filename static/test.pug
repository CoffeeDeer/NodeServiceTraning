doctype html
head
	//link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.min.css")
	link(rel="stylesheet" href="css/style.css")
	link(rel="stylesheet" href="css/basic.css")
	script(type="text/javascript" src="js/jquery-3.5.1.min.js")
	script(type="text/javascript" src="js/lena.js")
	script(type="text/javascript" src="js/plotly-latest.min.js")

body
	h1 #{title}
	p.greetings#people #{message}

	p#isCVLoad openCV 로딩중.....

	label(for="submitByPicture") 스크린샷 업로드
		input#submitByPicture(type="file" accept="image/*")
	div
		span#submitedPictureArea
			// full2.png 아레나 결과
			// full4.png 프레나 결과
			img#submitedPicture(src='img/full4.png' width='500')
			//img#submitedPicture(src='img/some2.jpg')
			//style=('width: 900px;'))
	div
		span
			canvas#canvas.image-canvas()
	div
		span
			img#canvasOutput
	//-           
		var img = document.getElementById("submitedPicture");
		var selectorCanvas = document.getElementById("canvas");
		LenaJS.filterImage(selectorCanvas, LenaJS['grayscale'], img);
		LenaJS.redrawCanvas(selectorCanvas, LenaJS['highpass']);
	script.

		let iscvLoad = false;

		function cropImage(image, croppingCoords) {
			var cc = croppingCoords;

			var workCan = document.createElement("canvas"); // create a canvas
			workCan.width = Math.floor(cc.width);  // set the canvas resolution to the cropped image size
			workCan.height = Math.floor(cc.height);

			var ctx = workCan.getContext("2d");    // get a 2D rendering interface
			ctx.drawImage(image, -Math.floor(cc.x), -Math.floor(cc.y),500,1000); // draw the image offset to place it correctly on the cropped region

			var result = new Image()
			result.src = workCan.toDataURL();       // set the image source to the canvas as a data URL

			return result;
		}

		function drawResizedImgaeOnCanvas(image, canvas, width) {

			var width_ratio = width / image.width

			canvas.width = Math.floor(width);  // set the canvas resolution to the cropped image size
			canvas.height = Math.floor(image.height * width_ratio);


			var ctx = canvas.getContext('2d');   // get a 2D rendering interface
			ctx.drawImage(image, 0, 0, width, canvas.height); // draw the image offset to place it correctly on the cropped region

			//var result = new Image()
			//result.src = workCan.toDataURL();       // set the image source to the canvas as a data URL

			//return result;
		}

		var charactersImageList = []

		var image = new Image();
		image.src = "img/characters.jpg"; // load the image
		image.onload = function () {  // when loaded

			var row = Math.floor(this.height / 76)
			var col = Math.floor(this.width / 76)

			console.log('row: ', row, ' col: ', col)

			for(var i = 0; i < row; i++){
				for(var j = 0; j < col; j++){
					var result = cropImage(
						this, {
						x : j * 76,
						y : i * 76,
						width : 76,
						height : 76
					});
					//document.getElementById('space').appendChild(result);  // Add the image to the DOM
					charactersImageList.push(result)
				}
			}
			//document.getElementById('space').appendChild(charactersImageList[92]); 
		};

		$('#submitByPicture').change(function(e){
			console.log('file changed')
			var file = e.target.files[0]

			if (file == undefined) {
				console.log('but file is empty')
				return;
			}

			if(!file.type.match("image/.*")){
				alert("이미지 확장자만 업로드 가능합니다.");
				return;
			};

			var reader = new FileReader();
			reader.onload = function(e) {
				$('#submitedPicture').attr('src', e.target.result);
			};
			reader.readAsDataURL(file);

			console.log('cccc')
		});

		//히스토그램을 정규화 관련 함수인가봐 
		var temp2 = function(){
			var ctx = selectorCanvas.getContext('2d');
			var pixels = ctx.getImageData(0, 0, selectorCanvas.width, selectorCanvas.height);

			var histogram = LenaJS.histogram(pixels);

			var maxNonZeroValueIndex = 0;
			var minNonZeroValueIndex = 255;
			var sum = 0;
			histogram.r.forEach(function(element, index){
				if(element !=0){
					minNonZeroValueIndex = Math.min(index, minNonZeroValueIndex);
					maxNonZeroValueIndex = Math.max(index, maxNonZeroValueIndex);

					sum += element;
				}
			});

			var zeroedArray = new Array(257).join('0').split('')
			var new_histogram = zeroedArray.map(Number);

			var temp = 0
			histogram.r.forEach(function(element, index){
				temp += element;
				new_index = temp/sum*255;
				new_histogram[index] = parseInt(new_index)
			});
		}

		$('#submitedPicture').on("load", function() {
			console.log('image loaded')

			var img = document.getElementById("submitedPicture");
			var selectorCanvas = document.getElementById("canvas");

			drawResizedImgaeOnCanvas(img, selectorCanvas, 1080)

			LenaJS.redrawCanvas(selectorCanvas, LenaJS['grayscale']);
			LenaJS.redrawCanvas(selectorCanvas, LenaJS['gaussian']);
			LenaJS.redrawCanvas(selectorCanvas, LenaJS['thresholding']);
			//LenaJS.redrawCanvas(selectorCanvas, LenaJS['invert']);
			LenaJS.redrawCanvas(selectorCanvas, LenaJS['morphologyClose']);
			LenaJS.redrawCanvas(selectorCanvas, LenaJS['morphologyClose']);



			var ctx = selectorCanvas.getContext('2d');
			var pixels = ctx.getImageData(0, 0, selectorCanvas.width, selectorCanvas.height);


		});

		function onOpenCvReady() {
			iscvLoad = true;

			$('#isCVLoad').text('OpenCV.js 로딩 완료.');

			var selectorCanvas = document.getElementById("canvas");

			let src = cv.imread(selectorCanvas);

			let dst = cv.Mat.zeros(src.cols, src.rows, cv.CV_8UC3);
			cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
			cv.threshold(src, src, 120, 200, cv.THRESH_BINARY);
			let contours = new cv.MatVector();
			let hierarchy = new cv.Mat();
			// You can try more different parameters
			cv.findContours(src, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);
			// draw contours with random Scalar
			for (let i = 0; i < contours.size(); ++i) {
				let color = new cv.Scalar(Math.round(Math.random() * 255), Math.round(Math.random() * 255),
					Math.round(Math.random() * 255));
				cv.drawContours(dst, contours, i, color, 1, cv.LINE_8, hierarchy, 100);
			}
			cv.imshow('canvasOutput', dst);
			src.delete(); dst.delete(); contours.delete(); hierarchy.delete();

		}


	script(async='' src='js/opencv.js' onload='onOpenCvReady();' type='text/javascript')




